version: "3"- beta
services:
   consul-bootstrap:
       image: consul:1.7.1
       restart: unless-stopped
       ports:
         - 8500:8500
         - 8443:8443
         - 8400:8400
         - 8301:8301
         - 8301:8301/udp
         - 8302:8302
         - 8302:8301/udp
         - 8300:8300
         - 8600:8600
       command: "agent -server -bootstrap -ui -client 0.0.0.0 -bind '{{ GetInterfaceIP \"eth0\" }}'"
       networks:
         - mds

   consul-server:
     image: consul:1.7.1
     restart: unless-stopped
     command: "agent -server -retry-join consul-bootstrap -client 0.0.0.0 -bind '{{ GetInterfaceIP \"eth0\" }}'"
     depends_on:
       - consul-bootstrap
     volumes:
       - consul:/consul/data
     networks:
       - mds

   consul-client:
     image: consul:1.7.1
     command: "agent -retry-join consul-bootstrap -client 0.0.0.0 -bind '{{ GetInterfaceIP \"eth0\" }}'"
     depends_on:
       - consul-bootstrap
     networks:
       - mds

   vault:
       depends_on:
         - consul-server
       image: vault:latest
       restart: unless-stopped
       cap_add:
         - IPC_LOCK
         - ALL
       ports:
         - 8200:8200
       environment:
         VAULT_LOCAL_CONFIG: '{"backend": {"consul": {"address": "consul-bootstrap:8500", "path": "vault/"}}, "listener": {"tcp": {"address": "0.0.0.0:8200", "tls_disable": "1"}}, "default_lease_ttl": "24h", "ui":true, "max_lease_ttl": "720h", "disable_mlock":true}'
         VAULT_ADDR: '0.0.0.0:8200'
       command:
         - server
       ulimits:
         nproc: 65535
       privileged: true
       networks:
         - mds
  mongo:
    image: mongo:4.2.3-bionic
    ports:
      - 27017:27017
    networks:
      - mds
    volumes:
      - mongo_data:/data/db

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - mds
    volumes:
     - elastic:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - mds
    depends_on:
      - elasticsearch
      
  jaeger-collector:
   image: jaegertracing/jaeger-collector
   ports:
     - "14269:14269"
     - "14268:14268"
     - "14267:14267"
     - "14250:14250"
     - "9411:9411"
   networks:
     - mds
   restart: on-failure
   environment:
     - SPAN_STORAGE_TYPE=elasticsearch
   command: [
     "--collector.zipkin.http-port=9411",
     "--es.server-urls=http://elasticsearch:9200",
     "--es.num-shards=1",
     "--es.num-replicas=0",
     "--log-level=error"
   ]
   depends_on:
     - elasticsearch

  jaeger-agent:
    image: jaegertracing/jaeger-agent
    hostname: jaeger-agent
    command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    networks:
      - mds
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    depends_on:
      - jaeger-collector

  jaeger-query:
    image: jaegertracing/jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    ports:
      - "16686:16686"
      - "16687:16687"
    networks:
      - mds
    restart: on-failure
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--span-storage.type=elasticsearch",
      "--log-level=debug"
    ]
    depends_on:
      - jaeger-agent
   grafana:
     hostname: 'grafana'
     image: grafana/grafana
     container_name: grafana
     restart: unless-stopped
     ports:
       - 3000:3000
     networks:
       - mds
     volumes:
       - grafana:/var/lib/grafana
       
   prometheus:
     hostname: 'prometheus'
     build: ./prometheus
     restart: unless-stopped
     ports:
       - '9090:9090'
     networks:
       - mds
     volumes:
       - prometheus:/prometheus
  redis:
    hostname: 'redis'
    image: redis
    container_name: redis
    restart: unless-stopped
    networks:
      - mds
    ports:
      - 6379:6379
    volumes:
      - redis:/data

  rabbitmq:
    hostname: 'rabbitmq'
    image: rabbitmq:3-management
    ports:
        - 25676:25676
        - 5672:5672
        - 15672:15672
     volumes:
         - rabbitmq:/var/lib/rabbitmq

networks:
  mds:
    driver: bridge
volumes:
  mongodb:
    driver: local-persist
  elastic:
    driver: local-persist
  consul:
    driver: local-persist
  